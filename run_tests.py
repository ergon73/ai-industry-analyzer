#!/usr/bin/env python3
# run_tests.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤

import subprocess
import sys
import os

def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í AI NEWS ANALYZER")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pytest
    try:
        import pytest
        print("‚úÖ pytest —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytest")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_results = []
    
    # 1. –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã V1
    print("\nüìã –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ V1...")
    try:
        result = subprocess.run([
            sys.executable, "-m", "pytest", 
            "tests/test_v1_basic.py", 
            "-v", "--tb=short"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã V1 –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            test_results.append(("V1 Basic", True))
        else:
            print("‚ùå –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã V1 –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            print(result.stdout)
            print(result.stderr)
            test_results.append(("V1 Basic", False))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ V1: {e}")
        test_results.append(("V1 Basic", False))
    
    # 2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Å—Ç—ã V2
    print("\nüìã –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤ V2...")
    try:
        result = subprocess.run([
            sys.executable, "-m", "pytest", 
            "tests/test_v2_advanced.py", 
            "-v", "--tb=short"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Å—Ç—ã V2 –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            test_results.append(("V2 Advanced", True))
        else:
            print("‚ùå –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Å—Ç—ã V2 –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            print(result.stdout)
            print(result.stderr)
            test_results.append(("V2 Advanced", False))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ V2: {e}")
        test_results.append(("V2 Advanced", False))
    
    # 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    print("\nüìã –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    try:
        result = subprocess.run([
            sys.executable, "-m", "pytest", 
            "tests/test_integration.py", 
            "-v", "--tb=short"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            test_results.append(("Integration", True))
        else:
            print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            print(result.stdout)
            print(result.stderr)
            test_results.append(("Integration", False))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
        test_results.append(("Integration", False))
    
    # 4. –í—Å–µ —Ç–µ—Å—Ç—ã –≤–º–µ—Å—Ç–µ
    print("\nüìã –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...")
    try:
        result = subprocess.run([
            sys.executable, "-m", "pytest", 
            "tests/", 
            "-v", "--tb=short"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            test_results.append(("All Tests", True))
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            print(result.stdout)
            print(result.stderr)
            test_results.append(("All Tests", False))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
        test_results.append(("All Tests", False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–û–í")
    print("=" * 50)
    
    passed = 0
    total = len(test_results)
    
    for test_name, success in test_results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:<20} {status}")
        if success:
            passed += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")
        return False

if __name__ == "__main__":
    success = run_tests()
    sys.exit(0 if success else 1) 